// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  adminId      Int       @id @default(autoincrement())
  userName     String    @unique @db.VarChar(100)
  password     String    @db.VarChar(100)
  role         String    @db.VarChar(20)
  refreshToken String?   @unique @db.VarChar(1000)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("admins")
}

model User {
  userId       Int       @id @default(autoincrement())
  userName     String    @unique @db.VarChar(100)
  firstName    String    @db.VarChar(100)
  lastName     String?   @db.VarChar(100)
  email        String    @unique @db.VarChar(100)
  password     String    @db.VarChar(100)
  photoProfile String?   @db.VarChar(300)
  role         String    @default("USER") @db.VarChar(15)
  refreshToken String?   @unique @db.VarChar(1000)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  follower               UserFollow[]             @relation("follower")
  following              UserFollow[]             @relation("following")
  posts                  Post[]
  userPostLikes          UserPostLike[]
  userPostComment        UserPostComment[]
  userPostCommentLike    UserPostCommentLike[]
  userPostSubComment     UserPostSubComment[]
  userPostSubCommentLike UserPostSubCommentLike[]

  @@map("users")
}

model UserFollow {
  follower  String
  following String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  userFollower  User @relation("follower", fields: [follower], references: [userName])
  userFollowing User @relation("following", fields: [following], references: [userName])

  @@id([follower, following])
  @@map("userFollows")
}

model Post {
  postId    Int       @id @default(autoincrement())
  title     String    @db.VarChar(100)
  body      String    @db.Text
  edited    Boolean   @default(false)
  userName  String
  contents  String[]  @default([])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user            User              @relation(fields: [userName], references: [userName])
  userPostLike    UserPostLike[]
  userPostComment UserPostComment[]

  @@map("posts")
}

model UserPostLike {
  userName  String
  postId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user User @relation(fields: [userName], references: [userName])
  post Post @relation(fields: [postId], references: [postId])

  @@id([userName, postId])
  @@map("userPostLikes")
}

model UserPostComment {
  commentId Int       @id @default(autoincrement())
  userName  String
  postId    Int
  comment   String    @db.Text
  edited    Boolean   @default(false)
  tags      String[]  @default([])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user                User                  @relation(fields: [userName], references: [userName])
  post                Post                  @relation(fields: [postId], references: [postId])
  userPostSubComment  UserPostSubComment[]
  userPostCommentLike UserPostCommentLike[]

  @@map("userPostComments")
}

model UserPostCommentLike {
  userId    Int
  commentId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user    User            @relation(fields: [userId], references: [userId])
  comment UserPostComment @relation(fields: [commentId], references: [commentId])

  @@id([userId, commentId])
  @@map("userPostCommentLikes")
}

model UserPostSubComment {
  subCommentId Int       @id @default(autoincrement())
  commentId    Int
  userName     String
  comment      String    @db.Text
  tags         String[]  @default([])
  edited       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  postComment            UserPostComment          @relation(fields: [commentId], references: [commentId])
  user                   User                     @relation(fields: [userName], references: [userName])
  userPostSubCommentLike UserPostSubCommentLike[]

  @@map("userPostSubComments")
}

model UserPostSubCommentLike {
  userId       Int
  subCommentId Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  user       User               @relation(fields: [userId], references: [userId])
  subComment UserPostSubComment @relation(fields: [subCommentId], references: [subCommentId])

  @@id([userId, subCommentId])
  @@map("userPostSubCommentLikes")
}
